[gd_scene load_steps=4 format=2]

[ext_resource path="res://Assets/Themes/Theme-RichTextLabel.tres" type="Theme" id=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

signal dialogue_started
signal dialogue_start_fading
signal dialogue_finished

# These are accessed via Type_Overhead.gd, and are get_node'd there.
# If we get_node them here, they aren't loaded till after the instance is added to the world (add_child)
# Please for the love of god, don't try to 'fix' this. After countless hours, this is the only thing that works.
# We can't do it after add_child either, otherwise we need to wait an idle frame
var viewport = \"OverheadViewport\"
var text_label = \"OverheadViewport/OverheadTextLabel\"
var sprite = \"DialogueSprite\"

onready var fade_out_timer = $DialogueSprite/StartFadeOut/TickDownFade
onready var fade_in_timer = $DialogueSprite/TickUpFade
onready var fade_out_start = $DialogueSprite/StartFadeOut

export(Vector3) var dialogue_scale = Vector3(3, 3, 3) setget set_scale, get_scale
var fade_time = .05


func _ready() -> void:
	viewport = get_node(viewport)
	sprite = get_node(sprite)
	sprite.texture = viewport.get_texture()
	text_label = get_node(text_label)
	
	set_scale(dialogue_scale)
	sprite.opacity = 0
	fade_in_timer.wait_time = fade_time
	emit_signal(\"dialogue_started\")
	fade_in_timer.start()



func connect_signals_to_parent(parent_object):
	if parent_object.has_method(\"_on_dialogue_started\") and \\
	   parent_object.has_method(\"_on_dialogue_ended\"):
		var _x = connect(\"dialogue_started\", parent_object, \"_on_dialogue_started\")
		_x = connect(\"dialogue_ended\", parent_object, \"_on_dialogue_ended\")
		return true
	return false
	


# This timer waits a moment, then triggers the fade_out timer. Purely for readability.
func _on_StartFadeOut_timeout() -> void:
#	print(\"Fading out now\")
	fade_out_timer.wait_time = fade_time
	emit_signal(\"dialogue_start_fading\")
	fade_out_timer.start()

# Ticks down the opacity 
func _on_TickDownFade_timeout() -> void:
	# Putting the opacity before the if-statement prevents a jerky queue_free situation
	sprite.opacity -= 0.05
	if sprite.opacity <= 0:
		# I don't think disabling the pointer is a good idea with overhead dialogue
		# It's supposed to be a quick thing rather than a cutscene type thing
		# Global.enable_pointer()
#		get_parent().emit_signal(\"dialogue_finished\")
		emit_signal(\"dialogue_finished\")
		queue_free()
	

# Makes the sprite fade in slowly, purely for aesthetics
func _on_TickUpFade_timeout() -> void:
	if sprite.opacity >= 1:
#		print(\"Starting fade out timer\")
		fade_out_start.start()
		fade_in_timer.stop()   # if we don't stop this timer, then it starts adding new colours
	sprite.opacity += 0.05


func _on_setup_instance(overhead_dialogue_scale, current_dialogue, label_rect_size):
	set_scale(overhead_dialogue_scale)
		
	# Sets the text for the overhead dialogue - comes from the clickArea's set text
	# [center] is needed to centre-justify the dialogue - there's no flag for it in RichTextLabels
	text_label.bbcode_text = \"[center]\" + current_dialogue + \"[/center]\"
	text_label.rect_size = label_rect_size
	
	# Adjusts the viewport size to the text label size. We can't do this in 
	# the instance as it is not yet in the scene tree
	viewport.size = label_rect_size


func set_scale(value:=Vector3(1, 1, 1)):
#	print_debug(name, scale)
	dialogue_scale = value
	scale = value
func get_scale():
	return scale
"

[sub_resource type="ViewportTexture" id=3]
viewport_path = NodePath("OverheadViewport")

[node name="INSTANCE_Overhead_Dialogue" type="Spatial"]
script = SubResource( 2 )

[node name="OverheadViewport" type="Viewport" parent="."]
size = Vector2( 265, 100 )
transparent_bg = true

[node name="OverheadTextLabel" type="RichTextLabel" parent="OverheadViewport"]
margin_right = 266.0
margin_bottom = 90.0
theme = ExtResource( 2 )
bbcode_enabled = true
bbcode_text = "[center]Placeholder text. Nothing else is here.[/center]"
text = "Placeholder text. Nothing else is here."
fit_content_height = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DialogueSprite" type="Sprite3D" parent="."]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, 0, 0, 0 )
flip_v = true
texture = SubResource( 3 )

[node name="TickUpFade" type="Timer" parent="DialogueSprite"]
wait_time = 0.05

[node name="StartFadeOut" type="Timer" parent="DialogueSprite"]
one_shot = true

[node name="TickDownFade" type="Timer" parent="DialogueSprite/StartFadeOut"]
wait_time = 0.05

[connection signal="timeout" from="DialogueSprite/TickUpFade" to="." method="_on_TickUpFade_timeout"]
[connection signal="timeout" from="DialogueSprite/StartFadeOut" to="." method="_on_StartFadeOut_timeout"]
[connection signal="timeout" from="DialogueSprite/StartFadeOut/TickDownFade" to="." method="_on_TickDownFade_timeout"]
